:toc:
toc::[]

= eclipse

The `eclipse` commandlet allows to install, configure, and launch the https://eclipse.org/[Eclipse IDE].
To launch Eclipse for your current workspace and devonfw-ide installation simply run:
`devon eclipse`

You may also supply additional arguments as `devon eclipse «args»`. These are explained by the following table:

.Usage of `devon eclipse`
[options="header"]
|=======================
|*Argument(s)*   |*Meaning*
|`--all`                  |if provided as first arg then to command will be invoked for each workspace
|`setup`                  |setup Eclipse (install or update)
|`add-plugin «id» [«url»]`|install an additional plugin
|`run`                    |launch Eclipse (default if no argument is given)
|`start`                  |same as `run`
|`ws-up[date]`            |update workspace
|`ws-re[verse]`           |reverse merge changes from workspace into settings
|`ws-reverse-add`         |reverse merge adding new properties
|`create-script`          |create launch script for this IDE, your current workspace and your OS
|=======================

== plugins
During the link:setup.asciidoc[setup] `devon eclipse setup` will be called what automatically installs Eclipse. The project link:configuration.asciidoc[configuration] typically defines the plugins that will be installed via `ECLIPSE_PLUGINS` link:variables.asciidoc[variable]. Otherwise defaults from this `eclipse` link:cli.asciidoc#commandlets[commandlet] will apply.
However, for specific needs you may even install additional plugins. In general you should try to stick with the configuration pre-defined by your project. But some plugins may be considered as personal flavor and are typically not predefined by the project config. This e.g. applies for devstyle that allows a real dark mode for eclipse and tunes the theming and layout of Eclipse in general. To avoid that projects ship with
too many plugins that may waste resources but are not used by every developer you have the freedom to install some additional plugins. Be aware that this comes at your own risk and sometimes plugins can conflict and break your IDE. The following list of plugins is guaranteed to be supported by this commandlet:

* https://github.com/devonfw/tools-cobigen/releases[cobigen] (incremental code-generator)
* http://andrei.gmxhome.de/eclipse/[anyedit] (for easy compare with clipboard, etc.)
* http://eclipse-cs.sf.net/update/[checkstyle] (for checkstyle support)
* https://spotbugs.github.io/eclipse/[spotbugs] (successor of findbugs)
* http://basti1302.github.com/startexplorer/update/[startexplorer] (for support to open current item in file manager of your OS)
* http://marketplace.eclipse.org/content/tm-terminal[terminal] (open terminal/shell inside Eclipse as view)
* http://download.eclipse.org/egit/github/updates/[github] (for devonfw projects that want to access github issues in Eclipse)
* http://www.soapui.org/eclipse/update/site.xml[soapui] (for service testing)
* http://regex-util.sourceforge.net/update/[regexutil] (to test regular expressions)
* https://m-m-m.github.io/eclipse-templatevariables/latest[templatevariables] (for advanced JDT templates)
* https://www.genuitec.com/updates/devstyle/ci/[devstyle]

The link-titles are the IDs accepted by `devon eclipse add-plugin «id»`. Otherwise the full featureID has to be specified together with the URL of the update site. However this is intended for project specific configuration. Here is an example how a project can configure the plugins in its `devon.properties` inside the link:settings.asciidoc[settings]:
```
ECLIPSE_PLUGINS=("AnyEditTools.feature.group" "http://andrei.gmxhome.de/eclipse/" "com.ess.regexutil.feature.group" "http://regex-util.sourceforge.net/update/")
```
For the above listed plugins you can also use the short form:
```
ECLIPSE_PLUGINS=("anyedit" "" "regexutil" "")
```
Of course you may also mix plugin IDs with fully qualified plugins.
