:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Code Contributions

=== Notes on Code Contributions

This project is intended to be easy to contribute to. One service allowing such simplicity is GitHub was therefore selected as preferred collaboration platform.

In order to contribute code, git and GitHub specific pull-requests are being used.

It is mandatory to follow the <<Contributor Covenant Code of Conduct,code of conduct>> that must be present in the root of every OSS or private project as `CODE_OF_CONDUCT.adoc`. 

=== Introduction to Git and GitHub

Git is a version control system used for a coordinated and versioned collaboration of computer files. It enables a project to be easily worked on by multiple developers and contributors.

GitHub is a platform for social coding used as strategic service by this project. Using the command line tool or the GUI Tool "GitHub Desktop" a user can easily manage project files. There are private and public repositories. Public ones can be accessed by everyone, private repositories require access permissions. Devonfw is provided as Open-Source and hence uses public repositories for its content.

==== Creating a new user account

This project uses GitHub as hosting service. Therefore you'll need an account to allow collaboration. Visit https://github.com/join?source=header-home[this page] to create a new account. If available, use *your CORP username* as GitHub username and *your CORP email address*.

A GitHub account is essential for contributing code and gaining permissions to access private repositories.

==== Git Basics

An in-depth documentation on basic Git syntax and usage can be found on the https://git-scm.com/docs[official Git homepage]. Another helpful and easy to follow instruction can be found http://rogerdudler.github.io/git-guide/[here].

=== Structure of our projects

In total, there are three GitHub organisations regarding devonfw:

* https://github.com/devonfw/[*devonfw*]
+
This is the official organisation. Repositories found here are intended to be reliable and officially supported.
* https://github.com/devonfw-forge[*devonfw-forge*]
+
This is the organisation for inofficial stuff. This is both sandbox/incubator for new and experimental projects as well as graveyard for outdated or deprecated projects. Projects that you can find here can be used at your own risk. However, there is no guarantee that it will make it to an official release or that APIs might change in an incompatible way.
* link:https://github.com/devonfw-wiki/[*devonfw-wiki*]
+
This organisation contains some repositories from the official `devonfw`  organisation with the same name but only containing the wiki. These represent the inofficial community wiki that can be edited by any authenticated github user. Changes are reviewed by the experts and maintainers of the project. When an official release is performed from one of these repositories, the final review and merge from the community wiki to the official wiki is performed. Hence, in the official wikis you will find the official state of the latest release, whereas in the community wikis you will find the latest work in progress that is expected to come with the next release.

=== Contributing to our projects

In order to contribute to our projects, developers must follow the following <<Development Guidelines,development guidelines>>. Other sources about contributing to this project:

* https://github.com/devonfw/devon4j/wiki/code-contribution[code contributions]
* https://github.com/devonfw/devon4j/wiki/doc-contribution[documentation contributions]

*Every project must include the following files* in order to establish the contributing rules and facilitate the process:

* `CONTRIBUTING.adoc` that establishes the specific guidelines of contributing in a project repository.
* `CODE_OF_CONDUCT.adoc` mandatory to contribute.
* `ISSUE_TEMPLATE.adoc` that defines the appropriated way to submit an issue in a project repository. 
* `PULL_REQUEST_TEMPLATE.adoc` that specifies the rules in order to submit a pull request in a project repository. 

This files should be included at the root folder or in a `docs` folder. https://github.com/stevemao/github-issue-templates[This repository] is a good resource to find the perfect templates for issues and pull requests that fit in your repository. 

==== Process of contributing code to this project

* Use the issue tracker to check whether the issue you would like to be working on exists. Otherwise create a new issue.
+
.Using GitHub's issue tracker
image::images/contributing/issue_list.PNG[Issue list, width="450", link="images/contributing/issue_list.PNG"]

* Before making more complex changes you should probably notify the community. The worst case would be you investing time and effort into something that'll be later rejected. Oftentimes the https://www.yammer.com/capgemini.com/#/threads/inGroup?type=in_group&feedId=5030942&view=all[Devon Community] on Yammer will have the right answer.
* Assign yourself to the issue you would like to work on. If a member was already assigned to your preferred issue, get in contact to contribute to the same issue.
* Fork the desired repository to your corporate GitHub account. Afterwards you'll have your own copy of the repository you'd like to work on.  
* Create a new branch for your feature/bugfix. Check out the develop branch for the upcoming release. The following changes will afterwards be merged when the new version is released.
* Please read the <<Working with forked repositories,Working with forked repositories>> document to learn all about this topic.
** Check out the develop branch
+
[source, bash]
----
git checkout develop-x.y.z
----
** Create a new branch
+
[source, bash]
----
git checkout -b myBranchName
----
* Apply your modifications according to the https://github.com/devonfw/devon4j/wiki/coding-conventions[coding conventions] to the newly created branch
* Verify your changes to only include relevant and required changes.
* Commit your changes locally
** When commiting changes please follow this pattern for your commit message:
+
[source]
----
#<issueId>: <change description>
----

** When working on multiple different repositories, the actual repository name of the change should also be declared in the commit message:
+

[source]
----
<project>/<repository>#<issueId>: <change description>
----
+
For example:
+
[source]
----
devonfw/devon4j#1: improved REST support
----
+
*Note:* Starting directly with a # symbol will comment out the line when using the editor to insert a commit message. Instead, you should use a prefix like a space or simply typing "Issue". E.g.:
+
[source]
----
Issue #4: Added some new feature, fixed some bug
----
+
The language to be used for commit messages is English.
* Push the changes to your Fork of the repository
* After completing the issue/bugfix/feature, use the _pull request_ function in GitHub. This feature allows other members to look over your branch, automated CI systems may test your changes and finally apply the changes to the corresponding branch (if no conflicts occur).
+
Use the tab "Pull requests" and the button labeled "New pull request". Afterwards you can _Choose different branches or forks above to discuss and review changes_.

=== Reviewing Pull Requests

Detailed information about revieweing can be found on the https://help.github.com/articles/reviewing-changes-in-pull-requests/[official topic on GitHub Pull Requests].

There are two different methods to review Pull Requests:

* *Human based reviews*
+
Other project members are able to discuss the changes made in the pull request by having insight into changed files and file differences by commenting.
+
.People can add comments to pull requests and suggest further changes
image::images/contributing/pr_commenting.PNG[Commenting on pull requests, width="450", link="images/contributing/pr_commenting.PNG"]

* *CI based reviews*
+
CI Systems like https://jenkins.io/[Jenkins] or https://travis-ci.org/[Travis.ci] are able to listen for new pull requests on specified projects. As soon as the request was made, Travis for example checks out the to-be-merged branch and builds it. This enables an automated build which could even include testcases. Finally, the CI approves the pull requests if the build was built and tested successfully, otherwise it'll let the project members know that something went wrong.
+
.If Travis fails to build a project, it'll post the results directly to the pull request
image::images/contributing/travis_failure.png[Travis failed to build, width="450", link="images/contributing/travis_failure.png"]
+
Combining these two possibilities should accelerate the reviewing process of pull requests.
