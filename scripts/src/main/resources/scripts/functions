#!/bin/bash
# Functions to be reused in devon-ide commands. Will actually be sourced,
# hash bang only for filetype detection and editor syntax support

# $1: message (may contain newlines with \n)
# $2: optional exit code
function doFail() {
  echo -e "ERROR: ${1}"
  echo "We are sorry for the inconvenience. Please check the above errors, resolve them and try again."
  if [ -n "${2}" ]
  then
    echo "Exit code was ${2}"
    exit ${2}
  else
    exit -1
  fi
}

# $1: message
# $2: exit code
function doResult() {
  if [ "${2}" = 0 ]
  then
    echo "Succeeded to ${1}"
  else
    if [ -z "$2" ]
    then
      doFail "Failed to ${1} (internal error missing exit code)"
    else
      doFail "Failed to ${1}" "${2}"
    fi
  fi
}

# $1: command
# $2: message
# $3: optional working directory
function doRunCommand() {
  local cwd=${PWD}
  if [ -n "${3}" ]
  then
    if [ -d "${3}" ]
    then
      cd "${3}"
    else
      doFail "Working directory ${3} does not exist."
    fi
  fi
  echo "Running command: ${1}"
  eval ${1}
  result=${?}
  if [ -n "${3}" ]
  then
    cd "${cwd}"
  fi
  local message
  if [ -z "${2}" ]
  then
    message="run command ${1/ */}"
  else
    message="${2} (${1/ */})"
  fi
  doResult "${message}" ${result}
}

# $1: the URL to download
function doDownload() {
  local target_dir="${DEVON_IDE_HOME}/updates/releases"
  local filename="${1/*\//}"
  local target="${target_dir}/${filename}"
  if [ -f "${target}" ]
  then
    echo "Artifact already exists at ${target}"
    echo "To force update please delete the file and run again."
    return -1
  fi
  mkdir -p "${target_dir}"
  echo "Downloading ${filename} from ${1}"
  curl -fL "${1}" -o "${target_dir}/${filename}"
  result=${?}
  if [ "${result}" != 0 ]
  then
    doFail "Failed to download ${filename} from ${1}" ${result}
  fi
}

# $1: the file to extract
# $2: optional volume name
function doExtract() {
  local target_dir=${DEVON_IDE_HOME}/updates/extracted
  local filename=${1/*\//}
  rm -rf "${target_dir}"
  mkdir -p "${target_dir}"
  local ext=${filename/*\./.}
  if [ "${ext}" = ".gz" ]
  then
    local pre_ext=${filename/\.gz/}
    pre_ext=${pre_ext/*\./.}
    if [ "${pre_ext}" == ".tar" ]
    then
      ext=".tgz"
    fi
  elif [ "${ext}" = ".bz2" ]
  then
    local pre_ext=${filename/\.gz/}
    pre_ext=${pre_ext/*\./.}
    if [ "${pre_ext}" == ".tar" ]
    then
      ext=".tbz2"
    fi    
  fi
  if [ "${ext}" = ".zip" ]
  then
    doRunCommand "unzip -q '${1}' -d '${target_dir}'"
  elif [ "${ext}" = ".tar" ]
  then
    doRunCommand "tar xf '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".tgz" ]
  then
    doRunCommand "tar xfz '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".tbz2" ]
  then
    doRunCommand "tar xfj '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".dmg" ]
  then
    local mount_dir="${DEVON_IDE_HOME}/updates/volume"
    mkdir -p "${mount_dir}"
    doRunCommand "hdiutil attach -quiet -nobrowse -mountpoint '${mount_dir}' '${1}'"
    doRunCommand "cp -a '${mount_dir}' '${target_dir}'"
    doRunCommand "hdiutil detach '${mount_dir}'"
  else
    doFail "Unknown archive format: ${ext}. Can not extract ${1}" ${result}
  fi
  echo "Successfully extracted archive ${filename} to updates/extracted"
}

# $1: absolute path of file or folder to move
# $2: optional target (e.g. "${DEVON_IDE_HOME}/software/")
# $3: backup path
function doReplaceExtractedFile() {
  if [ ! -e "${1}" ]
  then
    doFail "The file or folder to move does not exist: ${1}"
  fi
  local filename="${1/*\//}"
  local target_dir="${DEVON_IDE_HOME}"
  local target="${DEVON_IDE_HOME}/${filename}"
  if [ -n "${2}" ]
  then
    target="${2}"
    target_dir=`dirname "${2}"`
  fi
  if [ -e "${target}" ]
  then
    local backup_dir="${DEVON_IDE_HOME}/${3}"
    mkdir -p "${backup_dir}"
    echo "moving existing ${target} to ${3}"
    mv "${target}" "${backup_dir}/"
  elif [ ! -d "${target_dir}" ]
  then
    echo "mkdir -p ${target_dir}"
    mkdir -p "${target_dir}"
  fi
  doRunCommand "mv '${1}' '${target}'"
}

# $1: name of file or folder to move from the extracted archive
# $2: optional target (e.g. "${DEVON_IDE_HOME}/software/")
function doReplaceExtracted() {
  local backup_dir="updates/backups/`date +"%m-%d-%y/%H-%M-%S"`"
  if [ -z "${1}" ] || [ "${1}" = '*' ]
  then
    for file in ${DEVON_IDE_HOME}/updates/extracted/*
    do
      if [ -e "${file}" ]
      then
        doReplaceExtractedFile "${file}" "${2}" "${backup_dir}"
      fi
    done
  else
    doReplaceExtractedFile "${DEVON_IDE_HOME}/updates/extracted/${1}" "${2}" "${backup_dir}"
  fi
}

# $1: URL (to artifactId)
function doMavenGetLatestVersion() {
  echo "Trying to determine the latest available version from ${1}/maven-metadata.xml"
  LATEST_VERSION=`curl -fs ${1}/maven-metadata.xml | grep latest | sed "s/.*<latest>\([^<]*\)<\/latest>.*/\1/"`
  result=${?}
  if [ "${result}" != 0 ] || [ -z "${LATEST_VERSION}" ]
  then
    doFail "Failed to determine the latest version from ${1}/maven-metadata.xml.\nCheck that 'curl' is installed (curl -v) and you have internet connection available." ${result}
  fi
}

# $1: variable name
# $2: default
function doGetVariable() {
  local name=`echo ${1} | tr a-z A-Z`
  local value=`eval echo '$'${name}`
  if [ -z "${value}" ]
  then
    echo ${2}
  else
    echo ${value}
  fi
}

# $1: target
# $2: source
function doMoveGlobSafe() {
  if [ -e "${2}" ]
  then
    echo "Moving ${2} to ${1}"
    mv "${2}" "${1}"
  fi
}

# $1: absolute target path
# $2: URL
function doGitPullOrClone() {
  doRequestCommand git
  if [ -d "${1}/.git" ]
  then
    doRunCommand "git pull" "" "${1}"
  else
    doRunCommand "git pull '${2}' '${1}'"
  fi
}

# $1: absolute target path
# $2: URL
# $3: optional archive folder to rename
function doInstall() {
  local dir=${1/*\//}
  if [ "${2/*\.//.}" = ".git" ]
  then
    doGitPullOrClone "${1}" "${2}"
    return
  fi
  echo
  echo "*** Starting installation from ${2} to ${1} ***"
  doDownload "${2}"
  doExtract ${DEVON_IDE_HOME}/updates/releases/${2/*\//}
  if [ -n "${3}" ]
  then
    doMoveGlobSafe ${DEVON_IDE_HOME}/updates/extracted/${dir} ${DEVON_IDE_HOME}/updates/extracted/${3}
  fi
  doReplaceExtracted "${dir}" "${1}"
  echo "Successfully installed ${1}"
  if [ "${1}" = "${DEVON_IDE_HOME}/software/${dir}" ]
  then
    doExtendPath "${1}"
    echo "To be fully functional please rerun 'devon' command to update your PATH properly."
  fi
}

# $1: software folder to add to path
function doExtendPath() {
  if [ -d "${1}/bin" ]
  then
    export PATH="${1}/bin:${PATH}"
  else
    export PATH="${1}:${PATH}"
  fi    
}

# $1: target path (e.g. "${DEVON_IDE_HOME}/software/")
# $2: URL (to groupId)
# $3: artifactId
# $4: version ('LATEST' for the most recent version)
# $5: suffix (e.g. '-sources.jar')
# $6: currentVersion
function doUpgradeMavenArtifact() {
  if [ -d "${1}/.git" ]
  then
    echo "Found git repository ${1} - updating via git"
    doRunCommand "git pull" "" "${1}"
    return
  fi
  local download_url="${2}"
  local artifact_id="${3}"
  download_url="${download_url}/${artifact_id}"
  local target_version="${4}"
  local suffix="${5}"
  local current_version="${6}"
  echo "*** Software Update of ${artifact_id} ***"
  echo "Updating ${1} from ${download_url}"
  if [ "${target_version}" = "LATEST" ]
  then
    doMavenGetLatestVersion ${download_url}
    target_version="${LATEST_VERSION}"
  fi
  if [ -n "${current_version}" ]
  then
    doVersionCompare "${target_version}" "${current_version}"
    result=${?}
    if [ "${result}" = 0 ]
    then
      echo "The ${artifact_id} package is already at the latest version ${target_version}"
      return
    else
      echo "You are using version ${current_version} of ${artifact_id} "
      echo "The new version to install is ${target_version}"
      if [ "${result}" = 2 ] && [ "${3}" != "LATEST" ]
      then
        echo "You are using a newer version than the latest release version."
        echo "Hence there is nothing to update."
        echo "Seems as you are an active devonfw developer. Thanks for contributing!"
        return
      fi
    fi
  fi
  download_url="${download_url}/${target_version}/${artifact_id}-${target_version}-${suffix}"
  doInstall "${1}" "${download_url}"
}

# $1: templates path
# $2: workspace path
# $3: configurator mode (-u / -r / -x)
function doConfigureWorkspace() {
  if [ ! -d "${1}" ]
  then
    doFail "Could not find templates path at ${1}"
  fi
  if [ ! -d "${2}" ]
  then
    doFail "Could not find workspace at ${2}"
  fi
  local replacement_patterns_path=${1}/replacement-patterns.properties
  if [ ! -e "${replacement_patterns_path}" ]
  then
    touch "${replacement_patterns_path}"
  fi
  doRunCommand "java -jar '${DEVON_IDE_HOME}/scripts/lib/devon-ide-configurator-${devon_ide_version}.jar' -cp '${DEVON_IDE_HOME}/scripts/lib/*.jar' -t '${1}' -w '${2}' -v '${replacement_patterns_path}' ${3}"
  local result=${?}
  local action="changed"
  if [ "${3}" = "-u" ]
  then
    local action="updated"
  elif [ "${3}" = "-i" ]
  then
    action="merged back to settings"
  elif [ "${3}" = "-x" ]
  then
    action="merged back to settings (including new properties)"
  fi
  if [ ${result} = 0 ]
  then
    echo "Your workspace ${WORKSPACE} has been ${action}"  
  else
    doFail "Your workspace ${WORKSPACE} could not be ${action}"
  fi
}

# $1: version1
# $2: version2
function doVersionCompare() {
  if [ "${1}" = "${2}" ]
  then
    return 0
  fi
  v1="${1}."
  v2="${2}."
  while [ -n "${v1}" ]
  do
    s1=${v1/[.]*/}
    s2=${v2/[.]*/}
    if [ "${s1}" != "${s2}" ]
    then
      n1=${v1/[^0-9]*/}
      n2=${v2/[^0-9]*/}
      if [ -z "${n1}" ]
      then
        n1=0
      fi
      if [ -z "${n2}" ]
      then
        n2=0
      fi
      if [ ${n1} -gt ${n2} ]
      then
        echo '>'
        return 1
      elif [ ${n1} -lt ${n2} ]
      then
        return 2
      else
        if [ "${s1}" = "${s2/-SNAPSHOT/}" ]
        then
          return 1
        elif [ "${s1}" \> "${s2}" ]
        then
          return 1
        else
          return 2
        fi
      fi
    fi
    v1=${v1#*.}
    v2=${v2#*.}
  done
  return 0
}

if [ -z "${DEVON_IDE_HOME}" ]
then
  local path=`dirname ${BASH_SOURCE:-$0}`
  path=`dirname ${path}`
  DEVON_IDE_HOME="${path}"
  echo "DEVON_IDE_HOME variable set to ${DEVON_IDE_HOME}"
fi
source "${DEVON_IDE_HOME}/scripts/variables"
if [ -f "${DEVON_IDE_HOME}/conf/variables" ]
then
  source "${DEVON_IDE_HOME}/conf/variables"
fi
if [ -f "${DEVON_IDE_HOME}/conf/variables-customized" ]
then
  source "${DEVON_IDE_HOME}/conf/variables-customized"
fi

