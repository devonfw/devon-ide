#!/bin/bash
# Functions to be reused in devon-ide commands. Will actually be sourced,
# hash bang only for filetype detection and editor syntax support

# $1: message (may contain newlines with \n)
# $2: optional exit code
function doFail() {
  echo
  echo "******** ATTENTION ********"
  echo -e "ERROR: ${1}"
  echo "We are sorry for the inconvenience. Please check the above errors, resolve them and try again."
  if [ -n "${2}" ]
  then
    echo "Exit code was ${2}"
    exit ${2}
  else
    exit -1
  fi
}

# $1: message
# $2: exit code
function doResult() {
  if [ "${2}" = 0 ]
  then
    echo "Succeeded to ${1}"
  else
    if [ -z "$2" ]
    then
      doFail "Failed to ${1} (internal error missing exit code)"
    else
      doFail "Failed to ${1}" "${2}"
    fi
  fi
}

# $1: command
# $2: message
# $3: optional working directory
function doRunCommand() {
  local cwd=${PWD}
  if [ -n "${3}" ]
  then
    if [ -d "${3}" ]
    then
      cd "${3}"
    else
      doFail "Working directory ${3} does not exist."
    fi
  fi
  echo "Running command: ${1}"
  eval ${1}
  result=${?}
  if [ -n "${3}" ]
  then
    cd "${cwd}"
  fi
  local message
  if [ -z "${2}" ]
  then
    message="run command ${1/ */}"
  else
    message="${2} (${1/ */})"
  fi
  doResult "${message}" ${result}
}

# $1: force option
function doIsForce() {
  if [ "${1}" = "-f" ] || [ "${1}" = "force" ] || [ "${1}" = "--force" ]
  then
    return
  fi
  return 255
}

# $1: optional spaces for indendation
function doForceHelp() {
  echo "-f | --force | force ${1}force proceeding even in case of warnings."
}

# $1: batch option (non interactive mode)
function doIsBatch() {
  if [ "${1}" = "-b" ] || [ "${1}" = "batch" ] || [ "${1}" = "--batch" ]
  then
    return
  fi
  return 255
}

# $1: optional spaces for indendation
function doBatchHelp() {
  echo "-b | --batch | batch ${1}run in non-interactive mode (do not ask any questions)."
}

# $1: quiet option
function doIsQuiet() {
  if [ "${1}" = "-q" ] || [ "${1}" = "quiet" ] || [ "${1}" = "--quiet" ]
  then
    return
  fi
  return 255
}

# $1: optional spaces for indendation
function doQuietHelp() {
  echo "-q | --quiet | quiet ${1}be quiet and avoid output."
}

# $1: basename of folder
function doIsIgnoredFolder() {
  case "${1}" in
   target)
     return;;
   eclipse-target)
     return;;
   node_modules)
     return;;
   .git)
     return;;
   .svn)
     return;;
  esac
  return 255
}

# $1: quiet option (-q, --quiet, quiet) or anything else to echo
# $2+: messages to output
function doEcho() {
  if doIsQuiet "${1}"
  then
    return
  fi
  shift
  echo -e ${@}
}

function doLogo() {
  local logo=(
"     ..........  ///                                                                                                   "
"    ..........  /////                  dd                                                      fffff                   "
"   ..........  ////////               ddd                                                     ffffff                   "
"  ..........  //////////              ddd                                                     ff                       "
" ..........    //////////        dddddddd   eeeeeee  vvv         vvv   oooo      nnnnnn     fffffff ww               ww"
"..........      //////////     dddddddddd  eeeeeeeeee vvv       vvv oooooooooo  nnnnnnnnnn  fffffff  ww      w      ww "
"..........       //////////   dddd    ddd eeee    eee  vvv     vvv oooo    oooo nnn     nnn   ff      ww    www    ww  "
"..........      //////////    ddd     ddd eeeeeeeeeee   vvv   vvv  ooo      ooo nnn      nnn  ff       ww  wwwww  ww   "
" ..........    //////////     ddd     ddd eeeeeeeeeee    vvvvvvv   ooo      ooo nnn      nnn  ff        ww wwwww ww    "
"  ..........  //////////       ddd    ddd eeee            vvvvv     ooo    ooo  nnn      nnn  ff         wwww wwww     "
"   ........  //////////         dddddddd   eeeeeeeeee      vvv       oooooooo   nnn      nnn  ff          ww   ww      "
"     .....  //////////            ddddd      eeeeee         v          oooo     nnn      nnn  ff           w   w       "
"      ...  //////////                                                                                                  "
  )
  local len=`tput cols`;
  if [ "$?" != 0 ]
  then
    len=80
  fi
  if [ "${len}" -gt 120 ]
  then
    len=120
  fi
  for ((i=0; i<${#logo[*]}; i=i+1))
  do
    echo "${logo[${i}]:0:$len}"
  done
}

function doLicenseAgreement() {
  if ! [ -f ~/.devon/.license.agreement ]
  then
    echo
    doLogo
    echo
    echo "Welcome to devon-ide!"
    echo "This product and its 3rd party components is open-source software."
    echo "However, before using it you need to read and accept the license agreement and terms of use."
    echo "You will be able to find it in one of the following locations:"
    echo "${DEVON_IDE_HOME}/TERMS_OF_USE.adoc"
    echo "https://github.com/devonfw/devon-ide/wiki/license"
    echo
    while true
    do
      read -p "Do you accept this terms of use and all license agreements? (yes/no) " answer
      case "${answer}" in
        yes)
          echo -e "On `date +"%Y-%m-%d"` at `date +"%H:%M:%S"` you accepted the devon-ide terms of use.\nhttps://github.com/devonfw/devon-ide/wiki/license" > ~/.devon/.license.agreement
          break;;
        no)
          exit -1;;
        *)
          echo "Please answer yes or no.";;
      esac
    done
    echo
  fi
}

# ${1}: devon command name
# ${n+1}: additional args
function doDevonCommand() {
  local command_name="${1}"
  local command="${DEVON_IDE_HOME}/scripts/command/${1}"
  if [ ! -e "${command}" ]
  then
    echo
    echo "*** WARNING ***"
    echo "Undefined devon command: ${1}"
    echo "Not found at ${command}"
    echo "Please check your DEVON_IDE_TOOLS variable:"
    echo "${DEVON_IDE_TOOLS}"
  else
    if [ ! -x "${command}" ]
    then
      echo "Command ${1} is not executable. Trying to repair..."
      chmod a+x "${command}"
    fi
    shift
    "${command}" ${@}
    result=${?}
    if [ ${result} != 0 ]
    then
      echo "ERROR: command '${command_name} ${@}' failed with exit code ${result}"
      exit ${result}
    fi
  fi
}

# $1: the URL to download
function doDownload() {
  doLicenseAgreement
  local target_dir=~/Downloads
  local filename="${1/*\//}"
  local target="${target_dir}/${filename}"
  if [ -f "${target}" ]
  then
    echo "Artifact already exists at ${target}"
    echo "To force update please delete the file and run again."
    return -1
  fi
  mkdir -p "${target_dir}"
  echo "Downloading ${filename} from ${1}"
  curl -fL "${1}" -o "${target_dir}/${filename}"
  result=${?}
  if [ "${result}" != 0 ]
  then
    doFail "Failed to download ${filename} from ${1}" ${result}
  fi
}

# $1: the file to extract
# $2: optional folder to extract to
function doExtract() {
  local target_dir=${DEVON_IDE_HOME}/updates/extracted
  local filename=${1/*\//}
  rm -rf "${target_dir}"
  if [ -n "${2}" ]
  then
    target_dir="${target_dir}/${2}"
  fi
  mkdir -p "${target_dir}"
  local ext=${filename/*\./.}
  if [ "${ext}" = ".gz" ]
  then
    local pre_ext=${filename/\.gz/}
    pre_ext=${pre_ext/*\./.}
    if [ "${pre_ext}" == ".tar" ]
    then
      ext=".tgz"
    fi
  elif [ "${ext}" = ".bz2" ]
  then
    local pre_ext=${filename/\.gz/}
    pre_ext=${pre_ext/*\./.}
    if [ "${pre_ext}" == ".tar" ]
    then
      ext=".tbz2"
    fi    
  fi
  if [ "${ext}" = ".zip" ]
  then
    doRunCommand "unzip -q '${1}' -d '${target_dir}'"
  elif [ "${ext}" = ".tar" ]
  then
    doRunCommand "tar xf '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".tgz" ]
  then
    doRunCommand "tar xfz '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".tbz2" ]
  then
    doRunCommand "tar xfj '${1}' -C '${target_dir}'"
  elif [ "${ext}" = ".dmg" ]
  then
    local mount_dir="${DEVON_IDE_HOME}/updates/volume"
    mkdir -p "${mount_dir}"
    doRunCommand "hdiutil attach -quiet -nobrowse -mountpoint '${mount_dir}' '${1}'"
    doRunCommand "cp -a '${mount_dir}'/*.app '${target_dir}'"
    doRunCommand "hdiutil detach -force '${mount_dir}'"
    if [ -e "${target_dir}/Applications" ]
    then
      rm "${target_dir}/Applications"
    fi
  else
    doFail "Unknown archive format: ${ext}. Can not extract ${1}" ${result}
  fi
  echo "Successfully extracted archive ${filename} to updates/extracted"
}

# $1: absolute path of file or folder to move
# $2: optional target (e.g. "${DEVON_IDE_HOME}/software/")
# $3: backup path
function doReplaceExtractedFile() {
  if [ ! -e "${1}" ]
  then
    doFail "The file or folder to move does not exist: ${1}"
  fi
  local filename="${1/*\//}"
  local target_dir="${DEVON_IDE_HOME}"
  local target="${DEVON_IDE_HOME}/${filename}"
  if [ -n "${2}" ]
  then
    target="${2}"
    target_dir=`dirname "${2}"`
  fi
  if [ -e "${target}" ]
  then
    local backup_dir="${DEVON_IDE_HOME}/${3}"
    mkdir -p "${backup_dir}"
    echo "moving existing ${target} to ${3}"
    mv "${target}" "${backup_dir}/"
  elif [ ! -d "${target_dir}" ]
  then
    echo "mkdir -p ${target_dir}"
    mkdir -p "${target_dir}"
  fi
  doRunCommand "mv '${1}' '${target}'"
}

# $1: name of file or folder to move from the extracted archive
# $2: target (e.g. "${DEVON_IDE_HOME}/software/")
function doReplaceExtracted() {
  local backup_dir="updates/backups/`date +"%y-%m-%d/%H-%M-%S"`"
  if [ -z "${1}" ] || [ "${1}" = '*' ]
  then
    for extracted_file in ${DEVON_IDE_HOME}/updates/extracted/*
    do
      if [ -e "${extracted_file}" ]
      then
        doReplaceExtractedFile "${extracted_file}" "${2}" "${backup_dir}"
      fi
    done
  else
    doReplaceExtractedFile "${DEVON_IDE_HOME}/updates/extracted/${1}" "${2}" "${backup_dir}"
  fi
}

MAVEN_REPO_URL="https://repo.maven.apache.org/maven2"

# $1: URL (to artifactId)
function doMavenGetLatestVersion() {
  echo "Trying to determine the latest available version from ${1}/maven-metadata.xml"
  LATEST_VERSION=`curl -fs ${1}/maven-metadata.xml | grep latest | sed "s/.*<latest>\([^<]*\)<\/latest>.*/\1/"`
  result=${?}
  if [ "${result}" != 0 ] || [ -z "${LATEST_VERSION}" ]
  then
    doFail "Failed to determine the latest version from ${1}/maven-metadata.xml.\nCheck that 'curl' is installed (curl -v) and you have internet connection available." ${result}
  fi
}

# defaults, may be overridden before calling doMavenArchetype
ARCHETYPE_GROUP_ID="com.devonfw.java.templates"
ARCHETYPE_ARTIFACT_ID="devon4j-template-server"

# $1: java package
# $2: optional groupId
# $3: optional artifactId 
function doMavenArchetype() {
  local target_db_type="h2" #TODO
  local target_package="${1}"
  local target_group_id="${2}"
  if [ -z "${target_group_id}" ]
  then
    target_group_id="${target_package}"
  fi
  local target_artifact_id="${3}"
  if [ -z "${target_artifact_id}" ]
  then
    target_artifact_id="${target_group_id/*\./}"
  fi
  if [ -e "${target_artifact_id}" ]
  then
    doFail "Project ${target_artifact_id} already exsits at ${PWD}"
  fi
  doDevonCommand mvn archetype:generate -DarchetypeGroupId=${ARCHETYPE_GROUP_ID} -DarchetypeArtifactId=${ARCHETYPE_ARTIFACT_ID} -Dpackage=${target_package} -DgroupId=${target_group_id} -DartifactId=${target_artifact_id} -Dversion=1.0.0-SNAPSHOT -DdbType=${target_db_type} -DinteractiveMode=false
}

# $1: target path (e.g. "${DEVON_IDE_HOME}/software/")
# $2: URL (to groupId)
# $3: artifactId
# $4: version ('LATEST' for the most recent version)
# $5: suffix (e.g. '-sources.jar')
# $6: currentVersion
function doUpgradeMavenArtifact() {
  doLicenseAgreement
  if [ -d "${1}/.git" ]
  then
    echo "Found git repository ${1} - updating via git"
    doGitPullOrClone "${1}"
    return ${?}
  fi
  local download_url="${2}"
  local artifact_id="${3}"
  download_url="${download_url}/${artifact_id}"
  local target_version="${4}"
  local suffix="${5}"
  local current_version="${6}"
  echo "*** Software Update of ${artifact_id} ***"
  echo "Updating ${1} from ${download_url}"
  if [ "${target_version}" = "LATEST" ]
  then
    doMavenGetLatestVersion ${download_url}
    target_version="${LATEST_VERSION}"
    echo "LATEST = $target_version"
  fi
  if [ -n "${current_version}" ]
  then
    doVersionCompare "${target_version}" "${current_version}"
    result=${?}
    if [ "${result}" = 0 ]
    then
      echo "The ${artifact_id} package is already at the latest version ${target_version}"
      return 1
    else
      echo "You are using version ${current_version} of ${artifact_id} "
      echo "The new version to install is ${target_version}"
      if [ "${result}" = 2 ] && [ "${3}" != "LATEST" ]
      then
        echo "You are using a newer version than the latest release version."
        echo "Hence there is nothing to update."
        echo "Seems as you are an active devonfw developer. Thanks for contributing!"
        return 1
      fi
    fi
  fi
  download_url="${download_url}/${target_version}/${artifact_id}-${target_version}${suffix}"
  doInstall "${1}" "${download_url}"
}

# $1: variable name
# $2: default
function doGetVariable() {
  local variable_name=`echo ${1} | tr a-z A-Z`
  local variable_value=`eval echo '$'${variable_name}`
  if [ -z "${variable_value}" ]
  then
    echo ${2}
  else
    echo ${variable_value}
  fi
}

# $1: target
# $2: source
function doMoveGlobSafe() {
  if [ -e "${2}" ]
  then
    echo "Moving ${2} to ${1}"
    mv "${2}" "${1}"
  fi
}

# $1: absolute target path
# $2: URL
function doGitPullOrClone() {
  if [ -d "${1}/.git" ]
  then
    local remotes=$(cd "${1}";git remote)
    if [ -n "${remotes}" ]
    then
      doRunCommand "git pull" "" "${1}"
    else
      echo "Can not update local git repository: ${1}"
      return 1
    fi
  else
    if [ -z "${2}" ]
    then
      doFail "Not a git repository: ${1}"
    else
      doRunCommand "git clone '${2}' '${1}'"
    fi
  fi
}

# $1: absolute target path
# $2: URL
# $3: optional archive folder to rename
# $4: optional sub-folder to extract to
function doInstall() {
  local dir=${1/*\//}
  if [ "${2/*\.//.}" = ".git" ]
  then
    doGitPullOrClone "${1}" "${2}"
    return
  fi
  echo "Starting installation from ${2} to ${1}"
  doDownload "${2}"
  doExtract ~/Downloads/${2/*\//} "${4}"
  if [ -n "${3}" ]
  then
    doMoveGlobSafe ${DEVON_IDE_HOME}/updates/extracted/${dir} ${DEVON_IDE_HOME}/updates/extracted/${3}
  fi
  doReplaceExtracted "${dir}" "${1}"
  echo "Successfully installed ${1}"
  if [ "${1}" = "${DEVON_IDE_HOME}/software/${dir}" ]
  then
    doExtendPath "${1}"
    echo "To be fully functional please rerun 'devon' command to update your PATH properly."
  fi
}

# $1: software folder to add to path
function doExtendPath() {
  if [ -d "${1}/bin" ]
  then
    export PATH="${1}/bin:${PATH}"
  else
    export PATH="${1}:${PATH}"
  fi    
}

# $1: templates path
# $2: workspace path
# $3: configurator mode (-u / -r / -x)
function doConfigureWorkspace() {
  if [ ! -d "${1}" ]
  then
    doFail "Could not find templates path at ${1}"
  fi
  if [ ! -d "${2}" ]
  then
    doFail "Could not find workspace at ${2}"
  fi
  local replacement_patterns_path=${1}/replacement-patterns.properties
  if [ ! -e "${replacement_patterns_path}" ]
  then
    touch "${replacement_patterns_path}"
  fi
  doRunCommand "java -jar '${DEVON_IDE_HOME}/scripts/lib/devon-ide-configurator-${devon_ide_version}.jar' -cp '${DEVON_IDE_HOME}/scripts/lib/*.jar' -t '${1}' -w '${2}' -v '${replacement_patterns_path}' ${3}"
  local result=${?}
  local action="changed"
  if [ "${3}" = "-u" ]
  then
    local action="updated"
  elif [ "${3}" = "-i" ]
  then
    action="merged back to settings"
  elif [ "${3}" = "-x" ]
  then
    action="merged back to settings (including new properties)"
  fi
  if [ ${result} = 0 ]
  then
    echo "Your workspace ${WORKSPACE} has been ${action}"  
  else
    doFail "Your workspace ${WORKSPACE} could not be ${action}"
  fi
}

# $1: name of ide
function doCreateIdeScript() {
  if doIsWindows
  then
    echo -e "@echo off\r\npushd %%~dp0\r\ncd workspaces/${WORKSPACE}\r\ncall devon.bat ${1}\r\npopd" > ${1}-${WORKSPACE}.bat
    echo "Created script ${1}-${WORKSPACE}.bat"
  else
    echo -e "#!/bin/bash\ncd \`dirname \${0}\`\ncd workspaces/${WORKSPACE}\nsource ${DEVON_IDE_HOME}/scripts/devon ${1}" > ${1}-${WORKSPACE}
    chmod a+x ${1}-${WORKSPACE}
    echo "Created script ${1}-${WORKSPACE}"
  fi
}

# $1: version1
# $2: version2
function doVersionCompare() {
  if [ "${1}" = "${2}" ]
  then
    return 0
  fi
  v1="${1}."
  v2="${2}."
  while [ -n "${v1}" ]
  do
    s1=${v1/[.]*/}
    s2=${v2/[.]*/}
    if [ "${s1}" != "${s2}" ]
    then
      n1=${v1/[^0-9]*/}
      n2=${v2/[^0-9]*/}
      if [ -z "${n1}" ]
      then
        n1=0
      fi
      if [ -z "${n2}" ]
      then
        n2=0
      fi
      if [ ${n1} -gt ${n2} ]
      then
        echo '>'
        return 1
      elif [ ${n1} -lt ${n2} ]
      then
        return 2
      else
        if [ "${s1}" = "${s2/-SNAPSHOT/}" ]
        then
          return 1
        elif [ "${s1}" \> "${s2}" ]
        then
          return 1
        else
          return 2
        fi
      fi
    fi
    v1=${v1#*.}
    v2=${v2#*.}
  done
  return 0
}

function doIsMacOs() {
  if [ "${OSTYPE:0:6}" = "darwin" ]
  then
    return 0
  fi
  return -1
}

function doIsWindows() {
  if [ "${OSTYPE}" = "cygwin" ] || [ "${OSTYPE}" = "msys" ]
  then
    return 0
  fi
  return -1
}

function doLoadProperties() {
  if ! [ -f "${1}" ]
  then
    return
  fi
  local key
  local value
  local export
  while IFS='=' read -r key value
  do
    if [ -n "${key}" ] && [ "${key:0:1}" != "#" ]
    then
      export=""
      if [ "${value:0:1}" = "~" ]
      then
        value=${HOME}${value:1}
      fi
      if [ "${key:0:7}" = "export " ]
      then
        export="true"
        key="${key:7}"
      fi
      if [ -z "${value}" ]
      then
        unset ${key}
      else
        if [ "${value:0:1}" != "(" ]
        then
          value=\"${value}\"
        fi
        eval ${key}=${value}
        if [ "${export}" = "true" ]
        then
          export ${key}
        fi
      fi
    fi
  done < "${1}"
}

if [ -z "${DEVON_IDE_HOME}" ]
then
  cd "$(dirname ${BASH_SOURCE:-$0})/.."
  DEVON_IDE_HOME="${PWD}"
  cd - > /dev/null
  echo "DEVON_IDE_HOME variable set to ${DEVON_IDE_HOME}"
fi
doLoadProperties "${DEVON_IDE_HOME}/scripts/devon.properties"
doLoadProperties "${DEVON_IDE_HOME}/devon.properties"
doLoadProperties "${SETTINGS_PATH}/devon/devon.properties"
doLoadProperties "${DEVON_IDE_HOME}/conf/devon.properties"

