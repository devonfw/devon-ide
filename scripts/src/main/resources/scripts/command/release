#!/usr/bin/env bash
source "$(dirname "${0}")"/../functions

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Build and deploy a release from the current project."
  echo
  echo "Arguments:"
  echo "-"
  echo
  echo "Options:"
  exit
elif [ -n "${1}" ]
then
  echo "Unknown argument '${1}'"
  exit 255
fi

if ! git diff-index --quiet HEAD || [ -n "$(git status -s)" ]
then
  doFail "Your local git repository has uncommitted changes. Please use 'git stash' and rerun on clean repo."
fi

if [ -z "${force}" ] 
then
  if ! doDevonCommand build check-top-level-project
  then
    doFail "Release has to be performed from the top-level project or using force option."
  fi
fi

doEcho "Trying to determine current version of your project..."
current_version="$(doDevonCommand build get-version)" || doFail "Failed to determine version. You need to run 'mvn install' before.\n${current_version}"
release_version="${current_version/-SNAPSHOT/}"
last_segment="${release_version/*./}"
next_version="${release_version:0:${#release_version}-${#last_segment}}$[last_segment+1]"
if [ "${current_version}" = "${release_version}-SNAPSHOT" ]
then
  next_version="${next_version}-SNAPSHOT"
fi
if [ "${current_version}" = "${release_version}" ]
then
  doConfirmWarning "Current version is not a SNAPSHOT version!"
fi
while true
do
  echo "Current version: ${current_version}"
  echo "Release version: ${release_version}"
  echo "Next version: ${next_version}"
  if [ "${next_version/-SNAPSHOT/}" == "${next_version}" ]
  then
    doWarning "Next version is not a SNAPSHOT version!"
  fi
  echo
  if doAskToContinue "" "return"
  then
    break
  else
    read -p "Please enter next version: " next_version
    echo
  fi
done
echo
echo "Setting version of your project to ${release_version} ..."
doDevonCommand build set-version "${release_version}" "${current_version}" cleanKeepBackup
git add -u
git commit -m "bumped version to ${release_version}"
git tag -a "release/${release_version}" -m "tagged version ${release_version}"
echo
echo "Building and deploying the release..."
doDevonCommand build release || doFail "Release build failed! You should reset your local commits via 'git reset HEAD^'."
echo "Setting version of your project to ${next_version} ..."
doDevonCommand build set-version "${next_version}" "${current_version}" ""
git add -u
git commit -m "set next version to ${next_version}"
doAskToContinue "Local commits and tag need to be pushed now.\nYou now have the chance to review these changes manually before they are pushed."
git push --tags
echo "Done."