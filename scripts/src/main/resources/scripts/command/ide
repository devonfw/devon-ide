#!/usr/bin/env bash
source "$(dirname "${0}")"/../functions
DEVON_IDE_REPO_URL="https://repo.maven.apache.org/maven2/com/devonfw/tools/ide"

function doUpdateScripts() {
  doUpgradeMavenArtifact "${DEVON_IDE_HOME}" "${DEVON_IDE_REPO_URL}" "devon-ide-scripts" "${target_version}" ".tar.gz" "$[devon_ide_version]"
  if [ "${?}" = 0 ]
  then
    cp "${DEVON_IDE_HOME}/scripts/devon" ~/.devon/devon
    if doIsWindows
    then
      cp "${DEVON_IDE_HOME}/scripts/devon.bat" "${USERPROFILE}/scripts/devon.bat"
    fi
  fi
}

function doUpdateSettings() {
  if [ ! -d "${SETTINGS_PATH}" ]
  then
    if [ -n "${1}" ]
    then
      SETTINGS_URL="${1}"
    fi    
    if [ -z "${SETTINGS_URL}" ]
    then
      echo "*** ATTENTION ***"
      echo "Missing your settings at ${SETTINGS_PATH} and no SETTINGS_URL is defined."
      echo "Further details can be found here:"
      echo "https://github.com/devonfw/devon-ide/wiki/settings"
      echo "Please contact the technical lead of your project to get the SETTINGS_URL for your project."
      echo "In case you just want to test devon-ide you may simply hit return to install default settings."
      echo
      read -p "Settings URL: " answer
      if [ -z "${answer}" ]
      then
        SETTINGS_URL="${DEVON_IDE_REPO_URL}/devon-ide-settings"
        doUpgradeMavenArtifact "${SETTINGS_PATH}" "${DEVON_IDE_REPO_URL}" "devon-ide-settings" "${target_version}" ".zip"
      else
        SETTINGS_URL="${answer}"
        doInstall "${SETTINGS_PATH}" "${SETTINGS_URL}" "devon-ide-settings"
      fi
    else
      doInstall "${SETTINGS_PATH}" "${SETTINGS_URL}" "devon-ide-settings"
    fi
    if [ ! -d "${SETTINGS_PATH}" ]
    then
      doFail "Installation of settings failed!"
    fi
    if [ ! -d "${SETTINGS_PATH}/.git" ]
    then
      cd "${SETTINGS_PATH}"
      git init
      git add .
      git commit -m "Initial settings downloaded from ${SETTINGS_URL}"
      cd -
    fi
  fi
}

# $1: current folder in ${SETTINGS_PATH}/devon
# $2: current folder in ${DEVON_IDE_HOME}
function doSetupConf() {
  for template in "${1}/"* "${1}/".*
  do
    local basename="${template/*\//}"
    if [ "${basename}" != "." ] && [ "${basename}" != ".." ] && [ "${basename}" != '*' ]
    then
      local conf="${2}/${basename}"
      if [ -d "${template}" ]
      then
        mkdir -p "${conf}"
        doSetupConf "${template}" "${conf}"
      elif [ -f "${template}" ]
      then
        if [ -f "${conf}" ]
        then
          doEcho "Configuration ${conf} already exists - skipping to copy from ${template}."
        else
          doEcho "Copying template ${template} to ${conf}."
          cp "${template}" "${conf}"
        fi
      fi
    fi
  done
}

function doSetup() {
  doUpdateSettings ${@}
  if [ -d "${SETTINGS_PATH}/devon" ]
  then
    doSetupConf "${SETTINGS_PATH}/devon" "${DEVON_IDE_HOME}"
  else
    doEcho "Your settings are missing the 'devon' folder. Please ask your technical lead to update your settings."
  fi  
  if [ -z "${DEVON_IDE_TOOLS}" ]
  then
    doFail "Variable DEVON_IDE_TOOLS is undefined. Please check your configuration (devon.properties)."
  fi
  for tool in "${DEVON_IDE_TOOLS[@]}"
  do
    echo
    echo "*** Setting up ${tool} ***"
    doDevonCommand ${tool} setup
  done
  if doIsWindows
  then
    if [ -e "${DEVON_IDE_HOME}/console.bat" ]
    then
      echo -e "@echo off\r\npushd %~dp0\r\ncall devon.bat\r\npopd\r\ncmd\r\n" > "${DEVON_IDE_HOME}/console.bat"
    fi
  fi
}

# $1: home directory
function doUninstallFromHome() {
  if [ -f "${1}/.bashrc" ]
  then
    cat "${1}/.bashrc" | grep -v '^alias devon="source ~/.devon/devon"$' | grep -v '^devon$' > "${DEVON_IDE_HOME}/updates/.bashrc" && mv "${DEVON_IDE_HOME}/updates/.bashrc" "${1}/.bashrc"
  fi
  if [ -f "${1}/.zshrc" ]
  then
    cat "${1}/.zshrc" | grep -v '^alias devon="source ~/.devon/devon"$' | grep -v '^devon$' > "${DEVON_IDE_HOME}/updates/.zshrc" && mv "${DEVON_IDE_HOME}/updates/.zshrc" "${1}/.zshrc"
  fi
  if [ -f "${1}/scripts/devon" ]
  then
    doRunCommand "rm '${1}/scripts/devon'"
  fi
  doRunCommand "rm -rf '${1}/.devon'"
}

function doUninstall() {
  echo "Uninstalling devon-ide..."
  mkdir -p "${DEVON_IDE_HOME}/updates"
  doUninstallFromHome ~
  if doIsWindows
  then
    if [ "${OSTYPE}" = "cygwin" ]
    then
      doUninstallFromHome "$(cygpath $USERPROFILE)"
    else
      if [ -d "/c/cygwin64" ]
      then
        doUninstallFromHome "/c/cygwin64/home/${USER}"
      elif [ -d "/c/cygwin" ]
      then
        doUninstallFromHome "/c/cygwin/home/${USER}"
      fi
    fi
    echo "To uninstall the windows explorer integrations we need to apply changes to the windows registry:"
    echo "${DEVON_IDE_HOME}/system/windows/devon-uninstall.reg"
    echo "Simply confirm the popup with Yes or otherwise review and merge the registry file manually."
    regedit.exe "${DEVON_IDE_HOME}/system/windows/devon-uninstall.reg"
  fi
  echo "So sad that you did not like devon-ide. It has been uninstalled from your system."
  echo "You can now manually delete ${DEVON_IDE_HOME} to remove it completely."
  echo "Goodbye and have a nice day!"
}

target_version="LATEST"

case "${DEVON_IDE_HOME}" in
  *\ * )
   doConfirmWarning "Your devon-ide installation path contains whitespace(s):\n${DEVON_IDE_HOME}\nThis will cause severe bugs (https://github.com/devonfw/devon-ide/issues/100)!\nWe strongly encourage you to abort and choose a different installation path."
   ;;
esac

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Setup and update devon-ide."
  echo
  echo "Arguments:"
  echo "setup [«SETTINGS_URL»]           setup devon-ide (getting the settings from the given URL)"
  echo "update                           check for updates and install if newer version is available"
  echo "update «package» [to «version»]  update (or downgrade) specified package (to specified version)"
  echo "                                 packages are e.g. 'scripts' or 'settings'"
  echo "uninstall                        uninstall devon-ide and remove all OS hooks (revert devon ide setup)"
  exit
elif [ "${1}" = "setup" ]
then
  shift
  doSetup ${@}
elif [ "${1}" = "uninstall" ]
then
  doUninstall
elif [ "${1}" = "update" ]
then
  if [ -z "${2}" ]
  then
    doUpdateScripts
    doUpdateSettings
  else
    if [ "${3}" = "to" ]
    then
      if [ -z "${4}" ]
      then
        doFail "Missing version argument!\ndevon ide update to «version»"
      fi
      target_version="${4}"
    elif [ -n "${3}" ]
    then
      doFail "Undefined update argument ${3}!"
    fi
    if [ "${2}" = "scripts" ]
    then
      doUpdateScripts
    elif [ "${2}" = "settings" ]
    then
      doUpdateSettings
    else
      doFail "Undefined package ${2}"
    fi
  fi
  exit
elif [ -z "${1}" ]
then
  doFail "Unknown argument: ${1}"
else
  doFail "Missing arguments. Call 'devon help ide' to get help."
fi
echo
echo "Completed $@"
