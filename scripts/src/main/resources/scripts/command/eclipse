#!/usr/bin/env bash
source "$(dirname "${0}")"/../functions
cd "${DEVON_IDE_HOME}"

# $1: plugin URL (update site)
# $2: plugin feature group ID
function doInstallEclipsePlugin() {
  local plugin="${2/\.feature\.group*/}"
  echo "Installing eclipse plugin ${plugin} from ${1}"
  ${ECLIPSE_HOME}/eclipse -nosplash -vm "${JAVA_HOME}/bin/java" -application org.eclipse.equinox.p2.director -repository "${1}" -installIU "${2}" -vmargs ${ECLIPSE_VMARGS}
  result=${?}
  if [ "${result}" != 0 ]
  then
    echo
    echo "******** ATTENTION ********"
    echo "WARNING: Installation of plugin ${plugin} failed. Please try to install manually."
    echo
  fi
}

function doSetup() {
  if [ -d "${ECLIPSE_HOME}" ]
  then
    if [ -n "${1}" ]
    then
      echo "Eclipse is already installed at ${ECLIPSE_HOME}"
    fi
  else
    #mirror="https://mirror.math.princeton.edu"
    local mirror="https://ftp.osuosl.org"
    local software_version="${ECLIPSE_VERSION:-2018-12}"
    local eclipse_edition=java
	local extract_folder=
    #eclipse_edition=jee
    local download_url="${mirror}/pub/eclipse/technology/epp/downloads/release/${software_version}/R/eclipse-${eclipse_edition}-${software_version}-R"
    if doIsMacOs
    then
      download_url="${download_url}-macosx-cocoa-x86_64.dmg"
	  extract_folder="eclipse"
    elif doIsWindows
    then
      download_url="${download_url}-win32-x86_64.zip"
    else
      download_url="${download_url}-linux-gtk-x86_64.tar.gz"
    fi
    doInstall "${ECLIPSE_HOME}" "${download_url}" "" "${extract_folder}"
    if doIsMacOs
    then
      echo "Doing workarounds for MacOS quirks..."
      echo -e "#!/usr/bin/env bash\n${DEVON_IDE_HOME}/software/eclipse/Eclipse.app/Contents/MacOS/eclipse \$@" > "${ECLIPSE_HOME}/eclipse"
      chmod a+x "${ECLIPSE_HOME}/eclipse"
    fi
    if [ -z "${ECLIPSE_PLUGINS}" ]
    then
      # TODO CobiGen and TM-Terminal
      # https://github.com/devonfw/devon-ide/issues/59
      # "com.devonfw.cobigen.eclipse.feature.feature.group,com.devonfw.cobigen.tempeng-freemarker,com.devonfw.cobigen.htmlplugin,com.devonfw.cobigen.javaplugin,com.devonfw.cobigen.jsonplugin,com.devonfw.cobigen.openapiplugin,com.devonfw.cobigen.propertyplugin,com.devonfw.cobigen.textmerger,com.devonfw.cobigen.tsplugin.com.devonfw.cobigen.tempeng-velocity,com.devonfw.cobigen.xmlplugin"
      # "https://marketplace.eclipse.org/content/tm-terminal" "org.eclipse.tm.terminal.feature.feature.group,org.eclipse.tm.terminal.view.feature.feature.group,org.eclipse.tm.terminal.control.feature.feature.group,org.eclipse.tm.terminal.connector.ssh.feature.feature.group,org.eclipse.tm.terminal.connector.telnet.feature.feature.group"
      # "http://downloads.sonarsource.com/eclipse/eclipse/" "org.sonar.ide.eclipse.feature.feature.group,org.sonar.ide.eclipse.jdt.feature.feature.group"
      # "http://update.eclemma.org/" "org.eclipse.eclemma.feature.feature.group"
      ECLIPSE_PLUGINS=(
        "http://andrei.gmxhome.de/eclipse/" "AnyEditTools.feature.group"
        "http://eclipse-cs.sf.net/update/" "net.sf.eclipsecs.feature.group"
        "https://spotbugs.github.io/eclipse/" "com.github.spotbugs.plugin.eclipse.feature.group"
        "http://basti1302.github.com/startexplorer/update/" "de.bastiankrol.startexplorer.feature.feature.group"
        "http://regex-util.sourceforge.net/update/" "com.ess.regexutil.feature.group"
        "https://m-m-m.github.io/eclipse-templatevariables/latest" "net.sf.mmm.eclipse.templatevariables.feature.feature.group"
        "https://www.genuitec.com/updates/devstyle/ci/" "com.genuitec.eclipse.theming.feature.feature.group"
      )
    fi
    for ((i=0; i<${#ECLIPSE_PLUGINS[*]}; i=i+2))
    do
      doInstallEclipsePlugin "${ECLIPSE_PLUGINS[${i}]}" "${ECLIPSE_PLUGINS[((${i}+1))]}"
    done
  fi
  if [ -n "${1}" ]
  then
    doRunCommand "command -v eclipse" "verify installation of Eclipse"
    if [ -e "${ECLIPSE_HOME}/.eclipseproduct" ]
    then
      doRunCommand "cat '${ECLIPSE_HOME}/.eclipseproduct'"
    else
      doRunCommand "cat '${ECLIPSE_HOME}/Eclipse.app/Contents/Eclipse/.eclipseproduct'"
    fi
  fi
}

function doConfigureEclipse() {
  local mode="${1}"
  if [ -e "${WORKSPACE_PATH}/.metadata/.lock" ]
  then
    # TODO 
    echo doFail "Eclipse workspace ${WORKSPACE} is locked.\nIt seems as if Eclipse is already running for this workspace.\nOtherwise consider deleting this file\n${WORKSPACE_PATH}/.metadata/.lock"
  fi
  if [ ! -d "${WORKSPACE_PATH}/.metadata" ]
  then
    if [ -z "${mode}" ]
    then
      mode="-u"
    elif [ "${mode}" != "-u" ]
    then
      doFail "Workspace ${WORKSPACE} is not initialized.\nReverse merge is not possible."
    fi
  fi
  if [ -n "${mode}" ]
  then
    doConfigureWorkspace "${SETTINGS_PATH}/eclipse/workspace" "${WORKSPACE_PATH}" ${mode}
  fi
}

function doStartEclipse() {
  doConfigureEclipse
  echo "launching Eclipse..."
  eclipse -clean -data "${WORKSPACE_PATH}" -keyring ~/.eclipse/.keyring -vm "${JAVA_HOME}/bin/java" -showlocation ${WORKSPACE} -vmargs ${ECLIPSE_VMARGS} &
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Manage Eclipse IDE and workspace."
  echo
  echo "Arguments:"
  echo " setup              setup Eclipse (install and verify)"
  echo " run | start        launch Eclipse IDE (default if no argument is given)"
  echo " ws-up[date]        update eclipse workspace"
  echo " ws-re[verse]       reverse merge changes from workspace into settings"
  echo " ws-reverse-add     reverse merge adding new properties"
  echo " create-script      create eclipse-${WORKSPACE} script if not already exists"
  exit
fi
ECLIPSE_HOME="${DEVON_IDE_HOME}/software/eclipse"
if [ -z "${1}" ]
then
  doSetup
  doStartEclipse
fi
while [ -n "${1}" ]
do
  if [ "${1}" = "run" ] || [ "${1}" = "start" ]
  then
    doSetup
    doStartEclipse
  elif [ "${1}" = "ws-up" ] || [ "${1}" = "ws-update" ]
  then
    doConfigureEclipse -u
  elif [ "${1}" = "ws-re" ] || [ "${1}" = "ws-reverse" ]
  then
    doConfigureEclipse -i
  elif [ "${1}" = "ws-reverse-add" ]
  then
    doConfigureEclipse -x
  elif [ "${1}" = "setup" ]
  then
    doSetup setup
    doCreateIdeScript eclipse
  elif [ "${1}" = "create-script" ]
  then
    doCreateIdeScript eclipse
  else
    doFail "Unknown argument: ${1}"
  fi
  shift
done
